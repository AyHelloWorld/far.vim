*far.vim*   Find And Replace

Author:         Oleg Khalidov <brooth@gmail.com>
Description:    Find And Replace
Homepage:       https://github.com/brooth/far.vim/
Version:        beta1

==============================================================================
CONTENTS                                                        *far-contents*

    1. Intro .................................................. |far-intro|
    2. Usage .................................................. |far-usage|
    2.1  Hello, World! ........................................ |far-quick-example|
    2.1  Far .................................................. |:Far|
    2.2  Farp ................................................. |:Farp|
    2.3  Fardo ................................................ |:Fardo|
    2.4  Refar ................................................ |:Refar|
    3. Extras ................................................. |far-extras|
    3.1  Multiline Replacement ................................ |far-multiline|
    3.2  Highlighting ......................................... |far-highlight|
    3.2  Command-Line Completion .............................. |far-complete|
    3.3  Preview Window ....................................... |far-preview|
    3.4  Jump Window .......................................... |far-jump|
    3.5  Consistency Check .................................... |far-consistency|
    4. Configuration .......................................... |far-config|
    5. Mappings ............................................... |far-mappings|
    6. Command Params ......................................... |far-params|
    7. Bugs ................................................... |far-bugs|
    8. Changelog .............................................. |far-changelog|
    9. License ................................................ |far-license|

==============================================================================
INTRO                                                           *far-intro*

    Far.vim makes it easier to find and replace text through mulple files.
    It's inspired by fancy IDEs, like IntellyJ and Eclipse, that provide
    cozy tools for such tasks.

==============================================================================
USAGE                                                           *far-usage*

"Hello, World!"                                                 *far-quick-example*
    No time to read? Here is the quick example:
>
    :Far foo bar **/*.py<CR>
    :Fardo<CR>
<
*:Far* {pattern} {replace-with} {file-mask} [params]
    Find the text to replace. Similar to *:substitute* command.
    The arguments are separated by space (" "). To escape space
    character use "\s" or "\ ".
    For the {pattern} see |pattern|. You can also use '*' as {pattern}
    for multiline replacement. See |far-multiline|.
    {replace-with} can be a literal string, or |sub-replace-special|.
    {file-mask} is a simple file mask pattern, see |:vimgrep| for examples.
    Note: Use '%' as {file-mask} if you want to "FAR" current file.
    For [params] see |far-params|

*:Farp* [params]
    |Farp| command allows to enter {pattern}, {replace-with} and {file-mask}
    one after the other:
>
     :Farp [<params>]
     >Search (pattern): {pattern}
     >Replace with: [replace-with]
     >File mask: {file-mask}
<
    Note: You don't have to escape space character.
    Note: |Farp| allows empty [replace-with] if you need to remove matched text.
    For {pattern}, {replace-with}, {file-mask} and [params] see |Far| command.

*:Fardo* [params]
    |Fardo| starts the replacement task. This command must be executed in a FAR
    buffer (buffer with |Far| or |Farp| result).
    For [params] see |far-params|.

*:Refar*
    |Refar| reruns |Far| or |Farp| command with the same arguments.
    Note: It must be executed in a FAR buffer.
    Use |Refar| in case the data's been changed and you need to update
    the search result.

==============================================================================
EXTRAS                                                          *far-extras*

Multiline Replacement                                           *far-multiline*
    It's allowed to use multiline text as {pattern} or/and {replace-with}
    expressions for |Far| and |Farp| commands.

    a) The first approach is to use visual selection. Go to Visual mode, highlight
    the text you want to replace and hit ':'. Use '*' as {pattern}:
>
    :'<,'>Far * {replace-with} {file-mask} [params]
<
    and resp. for |Farp|:
>
     :'<,'>Farp [<params>]
     >Search (pattern): *
     >Replace with: [replace-with]
     >File mask: {file-mask}
<
    b) The second approach is simply to paste yanked text.
>
    :Far <^r"> <^r"> {file-mask} [params]
<
     and resp. for |Farp|:
>
     :Farp [<params>]
     >Search (pattern): <^r">
     >Replace with: <^r">
     >File mask: {file-mask}
<
    Note: you need to explicitly escape all special characters. See |pattern|.


Highlighting                                                    *far-highlight*
    If |g:far#highlight_match| flag is set, far.vim adds per line
    highlighting for each matched and resulting item. Since per line highlighting
    is a CPU depending feature in vim, it's better sometimes to turn it off
    for a big amount of data (Avg. 200+ items).

    If the highlighting feature is off, the following abbreviations are added
    to the beginning of resp. lines:
        *X* - Item excluded
        *R* - Item replaced
        *B* - Item broken (see |far-consistency|)

    See |far-highlight-config|.


Command-Line Completion                                         *far-complete*
    Far.vim supports built-in command-line completion (see |'wildmenu'|).
    Hit <tab> while entering |Far|, |Farp| or |Fardo| command to auto-complete
    predefined and previously used arguments.
    Far.vim also supports auto-completion of |far-params| values. Hit <tab>
    after '=' character is entered.
>
    :Far foo bar % --win-l<tab>         ->  :Far foo bar % --win-layout
    :Far foo bar % --win-layout=c<tab>  ->  :Far foo bar % --win-layout=current
<
    See also |g:far#file_mask_favorites|.


Preview Window                                                  *far-preview*
    Far.vim allows previewing the code snippet where the item was found.
    If |g:far#auto_preview| flag is set, far.vim automatically opens and scrolls
    the preview window on cursor movement. If |g:far#auto_preview| is set to 0,
    you can control preview window manually (see |far-mappings|).
    You can also scroll preview window up and down from a FAR buffer
    (no need to change focus to preview window).
    By default <c-p> scrolls up and <c-n> scrolls down.

    See |far-mappings|, |g:far#preview_window_scroll_step|, |g:far#auto_preview|,
        |g:far#preview_window_layout|, |g:far#preview_window_width|,
        |g:far#preview_window_height|.


Jump Window                                                     *far-jump*
    If there is an open buffer for a matched item, you can jump to this
    buffer from a FAR window by hitting <CR> (by default) button. If there
    is no such buffer, far.vim opens it in a new window.

    See |far-mappings|, |g:far#jump_window_layout|, |g:far#jump_window_width|,
        |g:far#jump_window_height|.


Consistency Check                                               *far-consistency*
    Since the search (|Far| or |Farp| command) until the replacement (|Fardo|) task,
    the file content can be modified. While the replacement far.vim is checking
    that respective item's been replaced successfully. If not, this item is marked
    as 'broken'. You can see these items in |FarBrokenItem| highlighting
    or with *B* prefix if |g:far#highlight_match| is set to 0.

    See |far-highlight|, |g:far#highlight_match|.

==============================================================================
CONFIGURATION                                                   *far-config*

    You can change next variables in order to configure far.vim behavior.

*g:far#default_mappings*
    Apply default mappings to each FAR buffer. See |far-mappings|.

    Options: 0, 1
    Default: 1

*g:far#auto_preview*
    Automatically open/scroll preview window on cursor movement.
    See |far-preview|, |--auto-preview|

    Options: 0, 1
    Default: 1

*g:far#result_preview*
    Show result preview to the right of matched text.
    See |--result-preview|

    Options: 0, 1
    Default: 1

*g:far#highlight_match*
    Enable highlight feature in FAR buffers.
    See |far-highlight|, |--hl-match|.

    Options: 0, 1
    Default: 1

*g:far#window_layout*
    FAR window layout.
    See |--win-layout|.

    Options: 'top', 'left', 'right', 'bottom', 'tab', 'current'
    Default: 'right'

*g:far#window_width*
    FAR window width.
    See |--win-width|.

    Default: 100

*g:far#window_height*
    FAR window height.
    See |--win-height|.

    Default: 20

*g:far#preview_window_layout*
    Preview window layout (relative to FAR window).
    See |far-preview|, |--preview-win-layout|.

    Options: 'top', 'left', 'right', 'bottom'
    Default: 'bottom'

*g:far#preview_window_width*
    Preview window width.
    See |far-preview|, |--preview-win-width|.

    Default: 100

*g:far#preview_window_height*
    Preview window height.
    See |far-preview|, |--preview-win-height|.

    Default: 11

*g:far#jump_window_layout*
    Jump window layout.
    See |far-jump|, |--jump-win-layout|.

    Options: 'top', 'left', 'right', 'bottom', 'tab', 'current'
    Default: 'current'

*g:far#jump_window_width*
    Jump window width.
    See |far-jump|, |--jump-win-width|.

    Default: 100

*g:far#jump_window_height*
    Jump window height.
    See |far-jump|, |--jump-win-height|.

    Default: 15

*g:far#file_mask_favorites*
    List of favorite file masks provided for command-line completion.
    See |far-complete|

    Default: ['%', '**/*.*', '**/*.html', '**/*.js', '**/*.css']

*g:far#collapse_result*
    Auto collapse result tree.
    See |--collapse|

    Options: 0, 1
    Default: 0

*g:far#confirm_fardo*
    Confirm |Fardo| command.

    Options: 0, 1
    Default: 1

*g:far#preview_window_scroll_step*
    Step size for preview window scrolling.
    See |far-preview|, |far-mappings|.

    Default: 1

*g:far#auto_write_replaced_buffers*
    Automatically write replaced buffer (if it hadn't been unsaved)
    See |--auto-write-bufs|

    Options: 0, 1
    Default: 0

*g:far#auto_delete_replaced_buffers*
    Automatically delete replaced buffer (if it hadn't been loaded)
    See |--auto-delete-bufs|

    Options: 0, 1
    Default: 0

*g:far#window_min_content_width*
    Minimal width of a FAR buffer content.

    Default: 60

*g:far#check_window_resize_period*
    The period of time in milliseconds in which timer checks FAR buffer width
    and updates its content if the width has been changed.

    Default: 2000

*g:far#repl_devider*
    This variable controls the icon between matched and result text.

    Default: '  ➝  '

*g:far#multiline_sign*
    This variable controls multiline node icon.
    See |far-multiline|

    Default: '⬎'

*g:far#left_cut_text_sign*
    This variable controls the icon of cut in the beginning text.

    Default: '…'

*g:far#right_cut_text_sign*
    This variable controls the icon of cut in the end text.

    Default: '…'

*g:far#collapse_sign*
    This variable controls expanded node icon.

    Default: '-'

*g:far#expand_sign*
    This variable controls collapsed node icon.

    Default: '+'

------------------------------------------------------------------------------
Highlighting Groups:                                               *far-highlight-config*
    In order to configure FAR buffer appearance you can modify next
    highlight groups.

*FarFileStats*
    Controls buffer statistic appearance.

    Default:
>
    hi def link FarFileStats Comment
<
*FarFilePath*
    Controls buffer name (path) appearance.

    Default:
>
    hi def link FarFilePath Directory
<
*FarSearchVal*
    Controls matched item appearance.

    Default:
>
    hi def link FarSearchVal Keyword
<
*FarReplaceVal*
    Controls resulting item appearance.

    Default:
>
    hi def link FarReplaceVal String
<
*FarExcludedItem*
    Controls excluded item appearance.

    Default:
>
    hi def link FarExcludedItem NonText
<
*FarReplacedItem*
    Controls replaced item appearance.
>
    hi def link FarReplacedItem String
>
*FarBrokenItem*
    Controls broken items appearance.
    See |far-consistency|

    Default:
>
    hi def link FarBrokenItem Error
<
*FarLineCol*
    Controls line number text appearance.

    Default:
>
    hi def link FarLineCol LineNr
<
*FarPreviewMatch*
    Controls |:match| highlighting in preview windows.

    Default:
>
    hi def link FarPreviewMatch Search
<
==============================================================================
MAPPINGS                                                         *far-mappings*

    Next bindings are applied to new FAR buffers if |g:far#default_mappings|
    is set.
    Note: If you want to define custom mapping, you need to set to 0
    |g:far#default_mappings| variable and explicitly config all bindings.

*x*
*v_x*
    Exclude item under the cursor.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(1)<cr>
    vnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(1)<cr>
<
*i*
*v_i*
    Include item under the cursor.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(0)<cr>
    vnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(0)<cr>
<
*t*
*v_t*
    Toggle item exclusion under the cursor.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(-1)<cr>
    vnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(-1)<cr>
<
*X*
    Exclude all items.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_all(1)<cr>
<
*I*
    Include all items.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_all(0)<cr>
<
*T*
    Toggle exclusion for all items.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_all(-1)<cr>
<
*<CR>*
    Jump to the source code of the item under the cursor.
    See |far-jump|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#jump_buffer_under_cursor()<cr>
<
*p*
    Open preview window (if not) and scroll to the item under the cursor.
    See |far-preview|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#show_preview_window_under_cursor()<cr>
<
*P*
    Close preview window.
    See |far-preview|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#close_preview_window()<cr>
<
*CTRL-P*
    Scroll preview window up (if open).
    See |far-preview|, |g:far#preview_window_scroll_step|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY>
        \   :call g:far#scroll_preview_window(-g:far#preview_window_scroll_step)<cr>
<
*CTRL-N*
    Scroll preview window down (if open).
    See |far-preview|, |g:far#preview_window_scroll_step|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY>
        \   :call g:far#scroll_preview_window(g:far#preview_window_scroll_step)<cr>
<
*zo*
    Expand node under the cursor.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_under_cursor(0)<cr>
<
*zc*
    Collapse node under the cursor.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_under_cursor(1)<cr>
<
*za*
    Toggle node expanding under the cursor.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_under_cursor(-1)<cr>
<
*zr*
    Expand all nodes.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_all(0)<cr>
<
*zm*
    Collapse all nodes.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_all(1)<cr>
<
*zA*
    Toggle exclusion for all nodes.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_all(-1)<cr>
<

==============================================================================
COMMAND PARAMS                                                   *far-params*
    Command (|Far|, |Farp| and |Fardo|) params is used to temporarily
    (for current execution only) define several |far-config| variables.

*--win-layout*
    |Far| and |Farp| param. Changes |g:far#window_layout| value for current
    execution.

*--win-width*
    |Far| and |Farp| param. Changes |g:far#window_width| value for current
    execution.

*--win-height*
    |Far| and |Farp| param. Changes |g:far#window_height| value for current
    execution.

*--preview-win-layout*
    |Far| and |Farp| param. Changes |g:far#preview_window_layout| value for
    current execution.

*--preview-win-width*
    |Far| and |Farp| param. Changes |g:far#preview_window_width| value for
    current execution.

*--preview-win-height*
    |Far| and |Farp| param. Changes |g:far#preview_window_height| value for
    current execution.

*--jump-win-layout*
    |Far| and |Farp| param. Changes |g:far#jump_window_layout| value for
    current execution.

*--jump-win-width*
    |Far| and |Farp| param. Changes |g:far#jump_window_width| value for
    current execution.

*--jump-win-height*
    |Far| and |Farp| param. Changes |g:far#jump_window_height| value for
    current execution.

*--auto-preview*
    |Far| and |Farp| param. Changes |g:far#auto_preview| value for
    current execution.

*--hl-match*
    |Far| and |Farp| param. Changes |g:far#highlight_match| value for
    current execution.

*--collapse*
    |Far| and |Farp| param. Changes |g:far#collapse_result| value for
    current execution.

*--result-preview*
    |Far| and |Farp| param. Changes |g:far#result_preview| value for
    current execution.

*--auto-write-bufs*
    |Fardo| param. Changes |g:far#auto_write_replaced_buffers| value for
    current execution.

*--auto-delete-bufs*
    |Fardo| param. Changes |g:far#auto_delete_replaced_buffers| value for
    current execution.

==============================================================================
BUGS                                                            *far-bugs*
    If you found a bug, please, follow this easy-peasy steps:

    0)  Make sure you're using latest far.vim version.

    1)  Search for existing issues on https://github.com/brooth/far.vim/issues.
        If there is one and it's open, please, submit a reply.

    2)  Turn on debug mode. In '.vimrc' ('init.vim') set this flag:
>
        let g:far#debug = 1
<
        restart vim and reproduce the bug.

    3)  Create new issue (or submit a reply to existing) on
        https://github.com/brooth/far.vim/issues. Add brief description
        and attach '~/far.vim.log' log file.

    4) Turn off debug mode.

    Thank you in advance!

==============================================================================
CHANGELOG                                                       *far-changelog*

    beta1       first public version.

==============================================================================
LICENSE                                                         *far-license*

    MIT License. https://opensource.org/licenses/MIT
